Warsztaty Python – zajecia nr 1
Plan:
I.	Dystrybucje Pythona
II.	Tryby pracy (interaktywny i wsadowy)
W konsoli wykonaj następujące działania oraz przyjrzyj się odpowiedziom komputera.
1.	Dodawanie i odejmowanie – sprawdź działanie poniższego kodu
>>> 1 + 2
3
>>> 1 + 3.5
4.5
>>> -1 + 2.5
1.5
>>> 100 – 45
55
>>> -1.1 + 5
3.9

2.	Mnożenie – sprawdź działanie poniższego kodu
>>> 3 * 2
6
>>> 3.5 * 1.5
5.25

3.	Dzielenie – sprawdź działanie poniższego kodu
>>> 3 / 2
1.5
>>> 4 / 2
2.0

4.	Dzielenie bez części dziesiętnej w wyniku – sprawdź działanie poniższego kodu
>>> 3 // 2
1
>>> -3 // 2
-2

5.	Dzielnie modulo – sprawdź działanie poniższego kodu
>>> 9 % 2
1

6.	Potęgowanie – sprawdź działanie poniższego kodu
>>> 2 ** 2
4
>>> 2 ** 10
1024
>>> 1 ** 10
1
>>> 8 ** (1/3)
2.0

7.	Kolejność wykonywania działań – sprawdź działanie poniższego kodu
>>> 5 + 5 * 5
30
>>> (5 + 5) * 5
50

8.	Przypisywanie zmiennych – sprawdź działanie poniższego kodu
>>> a = 3
>>> a + 1
4
>>> a = 5
>>> a + 1
6

9.	Typy danych – sprawdź działanie poniższego kodu
>>> type(3)
<class 'int'>
>>> type(3.5)
<class 'float'>
>>> type(3.0)
<class 'float'>


10.	Rzutowanie (konwersja) typów – sprawdź działanie poniższego kodu

>>> int(3.8)
3
>>> int(3.0)
3
>>> float(3)
3.0

11.	Ułamki (oraz importowanie bibliotek) – sprawdź działanie poniższego kodu

>>> from fractions import Fraction
>>> f = Fraction(3, 4)
>>> f
Fraction(3, 4)
>>> Fraction(3, 4) + 1 + 1.5
3.25
Fraction(3, 4) + 1 + Fraction(1/4)
Fraction(2, 1)

12.	Liczby zespolone – sprawdź działanie poniższego kodu

>>> a = 2 + 3j
>>> type(a)
<class 'complex'>

>>> a = complex(2, 3)
>>> a
(2 + 3j)

>>> b = 3 + 3j
>>> a + b
(5 + 6j)
>>> a - b
(-1 + 0j)

>>> a * b
(-3 + 15j)
>>> a / b
(0.8333333333333334 + 0.16666666666666666j)

>>> z = 2 + 3j
>>> z.real
2.0
>>> z.imag
3.0

>>> z.conjugate()
(2 - 3j)

>>> (z.real ** 2 + z.imag ** 2) ** 0.5
3.605551275463989

>>> abs(z)
3.605551275463989

13.	Przyjmowanie danych od użytkownika – sprawdź działanie poniższego kodu

>>> a = input()
1

>>> a
'1'

>>> s1 = 'a string'
>>> s2 = "a string"

>>> a = '1'
>>> int(a) + 1
2
>>> float(a) + 1
2.0

14.	Wyjątki - wprowadź poniższe instrukcje i przeanalizuj odpowiedzi interpretera

>>> int('2.0')
Traceback (most recent call last):
Working with Numbers 9
File "<pyshell#26>", line 1, in <module>
int('2.0')
ValueError: invalid literal for int() with base 10: '2.0'

>>> a = float(input())
3/4
Traceback (most recent call last):
File "<pyshell#25>", line 1, in <module>
a=float(input())
ValueError: could not convert string to float: '3/4'

15.	Obsługa wyjątków – sprawdź działanie poniższego kodu
Wcześniejsze instrukcje wywoływały błąd. Można sobie z nimi poradzić korzystając z konstrukcji try/exept.

>>> try:
a = float(input('Enter a number: '))
except ValueError:
print('You entered an invalid number')

Aby przyjąć dane z klawiatury z wcześniejszym komunikatem można użyć konstrukcji:
a = input('Input an integer: ')

16.	Inny sposób na sprawdzanie typów

>>> 1.1.is_integer()
False

>>> 1.0.is_integer()
True

17.	Ułamki i liczby zespolone jako dane wejściowe

W tej wersji program zadziała:

>>> a = Fraction(input('Enter a fraction: '))
Enter a fraction: 3/4
>>> a
Fraction(3, 4)

A w tej?

>>> a = Fraction(input('Enter a fraction: '))
Enter a fraction: 3/0
Traceback (most recent call last):
File "<pyshell#2>", line 1, in <module>
a = Fraction(input('Enter a fraction: '))
File "/usr/lib64/python3.3/fractions.py", line 167, in __new__
raise ZeroDivisionError('Fraction(%s, 0)' % numerator)
ZeroDivisionError: Fraction(3, 0)

W tym przypadku nasz program nie zadziałał. Możemy go naprawić w następujący sposób:

>>> try:
a = Fraction(input('Enter a fraction: '))
except ZeroDivisionError:
print('Invalid fraction')
Enter a fraction: 3/0
Invalid fraction

Podobnie w przypadku liczb zespolonych. Teraz program zadziała:

>>> z = complex(input('Enter a complex number: '))
Enter a complex number: 2+3j
>>> z
(2+3j)

Ale co jeśli wprowadzone dane będą w formie łańcucha znaków '2 + 3j'?
Aby się przed tym zabezpieczyć warto skorzystać z wyjątku ValueError.

18.	Funkcje własne - zapoznaj się z działaniem poniższego kodu

Utwórzmy funkcję, która będzie sprawdzać czy dana liczba jest jej dzielnikiem:

def is_factor(a, b):
if b % a == 0:
return True
else:
return False

A teraz ją wywołajmy:

>>> is_factor(4, 1024)
True

19.	Pętla for

Aby wykonać pewną część kodu wielokrotnie możemy skorzystać z następującej konstrukcji:

>>> for i in range(1, 4):
print(i)
1
2
3

Lub z takiej:

>>> for i in range(5):
print(i)
0
1
2
3
4


Lub z takiej:

>>> for i in range(1,10,2):
print(i)
1
3
5
7
9



20.	Formatowanie wyniku działania instrukcji print

Do wyświetlanego komunikatu możemy wprowadzić zmienne za pomocą operatora klamry i metody format. Przeanalizuj poniższe przykłady.

>>> item1 = 'apples'
>>> item2 = 'bananas'
>>> item3 = 'grapes'
>>> print('At the grocery store, I bought some {0} and {1} and {2}'.format(item1, item2, item3))
At the grocery store, I bought some apples and bananas and grapes


>>> print('Number 1: {0} Number 2: {1} '.format(1, 3.578))
Number 1: 1 Number 2: 3.578

Zadania:


1.	Napisz skrypt, który będzie wyświetlać wszystkie kolejne dzielniki wprowadzonej liczby:
2.	Korzystając z pętli for oraz możliwości formatowania działania funkcji print utwórz program, który po prowadzeniu liczby wyświetli następujący komunikat:

Enter a number : 5 <- liczba wprowadzona przez uzytkownika
5.0 x 1 = 5.0
5.0 x 2 = 10.0
5.0 x 3 = 15.0
5.0 x 4 = 20.0
5.0 x 5 = 25.0
5.0 x 6 = 30.0
5.0 x 7 = 35.0
5.0 x 8 = 40.0
5.0 x 9 = 45.0
5.0	x 10 = 50.0

3.	Korzystając z pojęcia funkcji utwórz program, który będzie miał możliwość zamiany temperatury pomiędzy skalami Celsjusza i Fahrenheita (w obie strony). C = (F-32)x(5/9), F = (C*9/5)+32
4.	Utwórz program do zamiany kilometrów na mile i na odwrót.
5.	Utwórz program do znajdowania miejsc zerowych trójmianu kwadratowego x1 = (-b+sqrt(b*b-4*a*c))/(2*a)
x2 = (-b-sqrt(b*b-4*a*c))/(2*a)
6.	Utwórz program, który będzie komunikować, czy wprowadzona liczba jest dodatnia czy nie
7.	Utwórz program dodający ułamki zwykłe
8.	Utwórz program, który wyłączy się po naciśnięciu przez użytkownika konkretnego przycisku. 